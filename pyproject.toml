[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autogen-voting-extension"
version = "0.1.0"
description = "Voting extension for AutoGen"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "autogen",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-xdist",
    "ruff",
    "pyright",
    "mypy",
    "bandit",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio", 
    "pytest-cov",
    "pytest-xdist",
    "ruff",
    "pyright",
    "mypy",
    "bandit",
]

[tool.poe.tasks]
fmt.help = "Format code with ruff"
fmt.cmd = "ruff format ."

lint.help = "Lint code with ruff"
lint.cmd = "ruff check --fix ."

lint-ci.help = "Lint code for CI (no fixes applied)"
lint-ci.cmd = "ruff check ."

pyright.help = "Run pyright type checker"
pyright.cmd = "pyright src"

mypy.help = "Run mypy type checker"
mypy.cmd = "mypy src"

test.help = "Run tests with coverage"
test.cmd = "pytest -n auto --cov=src --cov-report=term-missing --cov-report=xml tests"

security.help = "Run security checks"
security.cmd = "bandit -r src"

check.help = "Run all code quality checks (matches AutoGen's poe check)"
check.sequence = [
    "fmt",
    "lint-ci", 
    "pyright",
    "mypy",
    "test",
    "security"
]

build.help = "Build package"
build.cmd = "python -m build"

clean.help = "Clean build artifacts"
clean.cmd = """
rm -rf build/ dist/ *.egg-info/ .coverage htmlcov/ .pytest_cache/ .mypy_cache/ .ruff_cache/
find . -name __pycache__ -exec rm -rf {} +
"""

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 120
select = ["E", "F", "W", "B", "Q", "I", "ASYNC", "T20"]
ignore = ["F401", "E501"]

[tool.ruff.format]
docstring-code-format = true

# Pyright configuration
[tool.pyright]
include = ["src"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    "**/tests",
    "samples/core_xlang_hello_python_agent/protos"
]
pythonVersion = "3.10"
pythonPlatform = "Linux"
typeCheckingMode = "strict"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--asyncio-mode=auto",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "samples/core_xlang_hello_python_agent/protos/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "if TYPE_CHECKING:",
]